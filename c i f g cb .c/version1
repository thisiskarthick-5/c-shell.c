#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <time.h>

#define RESET "\033[0m"
#define BLUE "\033[34m"
#define GREEN "\033[32m"
#define RED "\033[31m"
#define YELLOW "\033[33m"

// Option 1: Type and run code
void runTypedCode() {
    int langChoice;
    char code[1000];
    FILE *fptr;

    printf(YELLOW "\nChoose Language:\n" RESET);
    printf("1. C\n2. Python\n");
    printf("Enter your choice: ");
    scanf("%d", &langChoice);
    getchar();

    printf(GREEN "\nType your code below. End with a single line containing only `EOF`.\n\n" RESET);

    char line[200];
    code[0] = '\0';

    while (1) {
        printf("01>>");
        fgets(line, sizeof(line), stdin);
        if (strcmp(line, "EOF\n") == 0 || strcmp(line, "EOF\r\n") == 0) break;
        strcat(code, line);
    }

    if (langChoice == 1) {
        fptr = fopen("temp.c", "w");
        fprintf(fptr, "%s", code);
        fclose(fptr);
        printf(BLUE "\n------------------------\n" RESET);
        system("gcc temp.c -o temp.out && ./temp.out");
        printf(BLUE "\n------------------------\n" RESET);
    } else if (langChoice == 2) {
        fptr = fopen("temp.py", "w");
        fprintf(fptr, "%s", code);
        fclose(fptr);
        printf(BLUE "\n------------------------\n" RESET);
        system("python3 temp.py");
        printf(BLUE "\n------------------------\n" RESET);
    } else {
        printf(RED "‚ùå Invalid language choice!\n" RESET);
    }
}

// Option 2: File operations
void fileOperations() {
    int choice;
    char filename[100], content[500], ch;
    FILE *fptr;

    while (1) {
        printf(YELLOW "\n\U0001F4C2 File Operations:\n" RESET);
        printf("1. Create File\n2. Read File\n3. Delete File\n4. List Files\n5. Back to Main Menu\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1:
                printf("Enter file name: ");
                scanf("%s", filename);
                getchar();
                printf("Enter content (end with `EOF` line):\n");
                content[0] = '\0';
                char line[200];
                while (1) {
                    printf("\u27A4 ");
                    fgets(line, sizeof(line), stdin);
                    if (strcmp(line, "EOF\n") == 0 || strcmp(line, "EOF\r\n") == 0) break;
                    strcat(content, line);
                }
                fptr = fopen(filename, "w");
                fprintf(fptr, "%s", content);
                fclose(fptr);
                printf(GREEN "‚úÖ File Created Successfully!\n" RESET);
                break;

            case 2:
                printf("Enter file name: ");
                scanf("%s", filename);
                getchar();
                fptr = fopen(filename, "r");
                if (fptr == NULL) {
                    printf(RED "‚ùå File Not Found!\n" RESET);
                } else {
                    while ((ch = fgetc(fptr)) != EOF) putchar(ch);
                    fclose(fptr);
                }
                break;

            case 3:
                printf("Enter file name: ");
                scanf("%s", filename);
                if (remove(filename) == 0)
                    printf(GREEN "‚úÖ File Deleted!\n" RESET);
                else
                    printf(RED "‚ùå File Not Found!\n" RESET);
                break;

            case 4: {
                printf(GREEN "\U0001F4C2 Files in Current Directory:\n" RESET);
                struct dirent *de;
                DIR *dr = opendir(".");
                if (dr == NULL) {
                    printf(RED "‚ùå Could Not Open Directory\n" RESET);
                } else {
                    while ((de = readdir(dr)) != NULL)
                        printf("%s\n", de->d_name);
                    closedir(dr);
                }
                break;
            }

            case 5:
                return;

            default:
                printf(RED "‚ùå Invalid choice!\n" RESET);
        }
    }
}

// Option 3: Simple ChatBot
void chatbot() {
    char input[100];
    printf(GREEN "\n\U0001F4AC ChatBot Activated! Type something (type 'bye' to exit).\n" RESET);

    while (1) {
        printf(YELLOW "You: " RESET);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = '\0';

        if (strcasecmp(input, "bye") == 0 || strcasecmp(input, "exit") == 0) {
            printf(BLUE "Bot: Goodbye! \U0001F44B\n" RESET);
            break;
        } else if (strcasecmp(input, "hello") == 0 || strcasecmp(input, "hi") == 0) {
            printf(BLUE "Bot: Hey there! \U0001F44B\n" RESET);
        } else if (strcasecmp(input, "how are you") == 0) {
            printf(BLUE "Bot: I'm just a bunch of code, but I'm doing great!\n" RESET);
        } else if (strcasecmp(input, "who are you") == 0) {
            printf(BLUE "Bot: I'm your friendly terminal chatbot \U0001F916\n" RESET);
        } else {
            printf(BLUE "Bot: Hmm, I don't understand that yet.\n" RESET);
        }
    }
}

// Option 4: Games Menu
void gamesMenu() {
    int choice;
    while (1) {
        printf(GREEN "\nüéÆ Games Menu:\n" RESET);
        printf("1. Number Guessing Game\n");
        printf("2. Rock Paper Scissors\n");
        printf("3. Dice Roller\n");
        printf("4. Back to Main Menu\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();

        if (choice == 1) {
            int secret, guess, tries = 0, exitFlag = 0;
            srand(time(NULL));
            secret = rand() % 100 + 1;
            printf("\nGuess a number between 1 and 100 (0 to exit):\n");
            do {
                printf("Your guess: ");
                scanf("%d", &guess);
                if (guess == 0) {
                    exitFlag = 1;
                    break;
                }
                tries++;
                if (guess > secret) printf("Too high!\n");
                else if (guess < secret) printf("Too low!\n");
                else printf(GREEN "‚úÖ Correct in %d tries!\n" RESET, tries);
            } while (guess != secret);
            if (exitFlag) printf("Exited Number Guessing Game.\n");
        }
        else if (choice == 2) {
            int user, comp;
            char *choices[] = {"Rock", "Paper", "Scissors"};
            printf("\nChoose: 0 - Rock, 1 - Paper, 2 - Scissors (3 to exit): ");
            scanf("%d", &user);
            if (user == 3) continue;
            if (user < 0 || user > 2) {
                printf(RED "Invalid choice!\n" RESET);
                continue;
            }
            comp = rand() % 3;
            printf("You: %s | Computer: %s\n", choices[user], choices[comp]);
            if (user == comp) printf("It's a draw!\n");
            else if ((user == 0 && comp == 2) || (user == 1 && comp == 0) || (user == 2 && comp == 1))
                printf(GREEN "You win!\n" RESET);
            else
                printf(RED "You lose!\n" RESET);
        }
        else if (choice == 3) {
            int roll;
            printf("\nPress Enter to roll the dice (or type 'q' to exit): ");
            char input[10];
            fgets(input, sizeof(input), stdin);
            if (input[0] == 'q' || input[0] == 'Q') continue;
            roll = rand() % 6 + 1;
            printf("\nüé≤ You rolled: %d\n", roll);
        }
        else if (choice == 4) {
            return;
        }
        else {
            printf(RED "‚ùå Invalid game choice!\n" RESET);
        }
    }
}

// Main Menu
void menu() {
    int choice;

    while (1) {
        printf(YELLOW "\n\U0001F680 Welcome to the ZeroOne Shell!\n" RESET);
        printf("----------------------------------\n");
        printf("1Ô∏è‚É£ Type and Run Code\n");
        printf("2Ô∏è‚É£ File Operations\n");
        printf("3Ô∏è‚É£ ChatBot\n");
        printf("4Ô∏è‚É£ Games\n");
        printf("5Ô∏è‚É£ Exit\n");
        printf("----------------------------------\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1:
                runTypedCode();
                break;
            case 2:
                fileOperations();
                break;
            case 3:
                chatbot();
                break;
            case 4:
                gamesMenu();
                break;
            case 5:
                printf(YELLOW "Goodbye! \U0001F44B\n" RESET);
                return;
            default:
                printf(RED "‚ùå Invalid choice!\n" RESET);
        }
    }
}

int main() {
    menu();
    return 0;
}
