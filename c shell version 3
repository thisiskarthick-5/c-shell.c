#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_INPUT 1024
#define MAX_ARGS 100
#define MAX_VARS 50

// Structure to store variables
typedef struct {
    char name[50];
    int value;
} Variable;

Variable vars[MAX_VARS];
int varCount = 0;

// Function to set a variable
void set_variable(char *name, int value) {
    for (int i = 0; i < varCount; i++) {
        if (strcmp(vars[i].name, name) == 0) {
            vars[i].value = value;
            return;
        }
    }
    strcpy(vars[varCount].name, name);
    vars[varCount].value = value;
    varCount++;
}

// Function to get a variable's value
int get_variable(char *name, int *found) {
    for (int i = 0; i < varCount; i++) {
        if (strcmp(vars[i].name, name) == 0) {
            *found = 1;
            return vars[i].value;
        }
    }
    *found = 0;
    return 0;
}

// Function to execute a single-line C statement
void single_line_debug() {
    char line[MAX_INPUT];

    printf("Enter a single line of C code: ");
    fgets(line, MAX_INPUT, stdin);
    line[strcspn(line, "\n")] = '\0';

    FILE *file = fopen("temp.c", "w");
    if (!file) {
        perror("File creation failed");
        return;
    }

    fprintf(file, "#include <stdio.h>\nint main() { %s; return 0; }", line);
    fclose(file);

    system("gcc temp.c -o temp.out 2> errors.log");
    if (access("temp.out", F_OK) == 0) {
        system("./temp.out");
    } else {
        printf("Error in code:\n");
        system("cat errors.log");
    }
    remove("temp.c");
    remove("temp.out");
}

// Function to debug a C file
void file_debugger(char *filename) {
    char command[200];
    snprintf(command, sizeof(command), "gcc %s -o output.out 2> errors.log", filename);

    system(command);
    if (access("output.out", F_OK) == 0) {
        printf("Compilation successful. Running program...\n");
        system("./output.out");
    } else {
        printf("Compilation failed. Errors:\n");
        system("cat errors.log");
    }
    remove("output.out");
}

// Function to process shell commands
void simple_shell() {
    char input[MAX_INPUT];
    char *args[MAX_ARGS];
    int status;

    while (1) {
        printf("myshell> ");
        fflush(stdout);

        if (fgets(input, MAX_INPUT, stdin) == NULL) {
            printf("\n");
            break;
        }

        input[strcspn(input, "\n")] = '\0';

        if (strcmp(input, "exit") == 0) {
            break;
        }

        char *token = strtok(input, " ");
        int i = 0;
        while (token != NULL && i < MAX_ARGS - 1) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        if (i == 0) {
            continue;
        }

        if ((strcmp(args[0], "add") == 0 || strcmp(args[0], "sub") == 0 ||
             strcmp(args[0], "mul") == 0 || strcmp(args[0], "div") == 0) && i == 3) {
            int num1 = atoi(args[1]);
            int num2 = atoi(args[2]);

            if (strcmp(args[0], "add") == 0)
                printf("Result: %d\n", num1 + num2);
            else if (strcmp(args[0], "sub") == 0)
                printf("Result: %d\n", num1 - num2);
            else if (strcmp(args[0], "mul") == 0)
                printf("Result: %d\n", num1 * num2);
            else if (strcmp(args[0], "div") == 0) {
                if (num2 == 0)
                    printf("Error: Division by zero is not allowed.\n");
                else
                    printf("Result: %d\n", num1 / num2);
            }
            continue;
        }

        if (strcmp(args[0], "set") == 0 && i == 3) {
            set_variable(args[1], atoi(args[2]));
            printf("Variable '%s' set to %d\n", args[1], atoi(args[2]));
            continue;
        }

        if (strcmp(args[0], "get") == 0 && i == 2) {
            int found;
            int value = get_variable(args[1], &found);
            if (found)
                printf("%s = %d\n", args[1], value);
            else
                printf("Variable '%s' not found.\n", args[1]);
            continue;
        }

        if (strcmp(args[0], "repeat") == 0 && i > 2) {
            int times = atoi(args[1]);
            if (times <= 0) {
                printf("Error: Loop count must be positive.\n");
                continue;
            }
            for (int j = 0; j < times; j++) {
                pid_t pid = fork();
                if (pid < 0) {
                    perror("fork failed");
                } else if (pid == 0) {
                    execvp(args[2], &args[2]);
                    perror("exec failed");
                    exit(EXIT_FAILURE);
                } else {
                    waitpid(pid, &status, 0);
                }
            }
            continue;
        }

        if (strcmp(args[0], "run") == 0 && i > 1) {
            pid_t pid = fork();
            if (pid < 0) {
                perror("fork failed");
            } else if (pid == 0) {
                execvp(args[1], &args[1]);
                perror("exec failed");
                exit(EXIT_FAILURE);
            } else {
                waitpid(pid, &status, 0);
            }
            continue;
        }

        pid_t pid = fork();
        if (pid < 0) {
            perror("fork failed");
        } else if (pid == 0) {
            execvp(args[0], args);
            perror("exec failed");
            exit(EXIT_FAILURE);
        } else {
            waitpid(pid, &status, 0);
        }
    }
}

// **Main Function**
int main() {
    int choice;
    char filename[MAX_INPUT];

    printf("\n=== AI-Based C Code Debugger & Shell ===\n");
    printf("1. Normal Shell Mode\n");
    printf("2. Single-Line Debugging Mode\n");
    printf("3. File Debugging Mode\n");
    printf("Choose an option (1-3): ");
    scanf("%d", &choice);
    getchar(); 

    switch (choice) {
        case 1:
            simple_shell();
            break;
        case 2:
            single_line_debug();
            break;
        case 3:
            printf("Enter C filename to debug: ");
            fgets(filename, MAX_INPUT, stdin);
            filename[strcspn(filename, "\n")] = '\0';
            file_debugger(filename);
            break;
        default:
            printf("Invalid choice. Exiting...\n");
    }
    return 0;
}
